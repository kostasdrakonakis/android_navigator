
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = project.getProperty("publishedGroupId")
// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['MyPublication']
    configurations = ['archives']
    pkg {
        repo = project.getProperty("bintrayRepo")
        name = "android-navigator-annotations"
        desc = project.getProperty("libraryDescription")
        websiteUrl = project.getProperty("siteUrl")
        vcsUrl = project.getProperty("gitUrl")
        licenses = project.getProperty("allLicenses")
        publish = true
        publicDownloadNumbers = true
        version {
            desc = project.getProperty("libraryDescription")
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

version = project.getProperty("libraryVersion")

if (project.hasProperty("android")) {
    // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else {
    // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

// Generate javador
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Create the pom configuration with maven-publish plugin.
def pomConfig = {
    licenses {
        license {
            name project.getProperty("licenseName")
            url project.getProperty("licenseUrl")
            distribution "repo"
        }
    }
    developers {
        developer {
            id project.getProperty("developerId")
            name project.getProperty("developerName")
            email project.getProperty("developerEmail")
        }
    }
    scm {
        url project.getProperty("gitUrl")
    }
}

// Get the artifacts
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Create the publication with the pom configuration:
publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            artifact("$buildDir/libs/${project.getName()}.jar")
            groupId project.getProperty("publishedGroupId")
            artifactId "android-navigator-annotations"
            version project.getProperty("libraryVersion")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                getDependencies(configurations.compile, dependenciesNode)
                getDependencies(configurations.api, dependenciesNode)
                getDependencies(configurations.implementation, dependenciesNode)
                def root = asNode()
                root.appendNode('description', project.getProperty("libraryDescription"))
                root.appendNode('name', project.getProperty("libraryName"))
                root.appendNode('url', project.getProperty("siteUrl"))
                root.children().last() + pomConfig
            }
        }
    }
}

def getDependencies(config, dependenciesNode) {
    config.allDependencies.each {
        if (it.group != null && it.name != null) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
            printAdd(config, it)
            def exclusionsNode = dependencyNode.appendNode('exclusions')
            if (it.excludeRules.size() > 0) {
                printAddExclusions(config, it)
                it.excludeRules.each { rule ->
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', rule.group)
                    if (rule.module != null) {
                        exclusionNode.appendNode('artifactId', rule.module)
                    }
                }
            } else {
                dependencyNode.remove(exclusionsNode)
            }
        }
        println "Dependencies size: " + dependenciesNode.children().size()
    }
}

def printAdd(config, it) {
    println "Added dependency: '" + config.name + " " + it.group + ":" + it.name + ":" + it.version + "'"
}

def printAddExclusions(config, it) {
    println "Added exclusions for: '" + config.name + " " + it.group + ":" + it.name + ":" + it.version + "'"
}