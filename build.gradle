// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = '1.3.71'
    ext.dokka_version = '0.10.1'
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'digital.wup:android-maven-publish:3.6.3'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task deployAll() {
    if (deployProject == "true") {
        def annotationsAssemble = project.tasks.getByPath(":android-navigator-annotations:assemble")
        def annotationsPublish = project.tasks.getByPath(":android-navigator-annotations:publishAnnotationsPublicationToMavenLocal")
        def compilerAssemble = project.tasks.getByPath(":android-navigator-compiler:assemble")
        def compilerPublish = project.tasks.getByPath(":android-navigator-compiler:publishCompilerPublicationToMavenLocal")
        def navigatorAssemble = project.tasks.getByPath(":android-navigator:assemble")
        def navigatorPublish = project.tasks.getByPath(":android-navigator:publishMyPublicationPublicationToMavenLocal")
        dependsOn annotationsAssemble
        dependsOn annotationsPublish
        annotationsPublish.shouldRunAfter annotationsAssemble
        afterEvaluate {
            dependsOn compilerAssemble
            dependsOn compilerPublish
            dependsOn navigatorAssemble
            dependsOn navigatorPublish
            compilerAssemble.shouldRunAfter annotationsPublish
            compilerPublish.shouldRunAfter compilerAssemble
            navigatorAssemble.shouldRunAfter compilerPublish
            navigatorPublish.shouldRunAfter navigatorAssemble
        }
    } else {
        doLast {
            throw new GradleException("REASON: Cannot deploy. Project in development")
        }
    }
}
